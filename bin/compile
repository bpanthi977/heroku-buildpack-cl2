#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

# parse args
export BUILD_DIR=$1
export CACHE_DIR=$2
export ENV_DIR=$3
export BUILDPACK_DIR=$(cd $(dirname $0); cd ..; pwd) # absolute path of buildpack
SBCL_VERSION="1.2.16"

indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}
  
# Load config vars into environment
export_env_dir() {
  env_dir=$3
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export_env_dir $ENV_DIR

echo "-----> Compile params: $BUILD_DIR $CACHE_DIR $ENV_DIR"

if [ ! -d "$CACHE_DIR/sbcl/sbcl-${SBCL_VERSION}-x86-64-linux" ]; then
    echo "-----> unpackaging sbcl"
    SBCL_PACKAGE="$BUILDPACK_DIR/sbcl/sbcl-${SBCL_VERSION}-x86-64-linux-binary.tar.bz2"
    mkdir -p "$CACHE_DIR/sbcl" && tar xjf $SBCL_PACKAGE -C "$CACHE_DIR/sbcl"
    chmod +x "$CACHE_DIR/sbcl/sbcl-${SBCL_VERSION}-x86-64-linux/run-sbcl.sh"
fi

echo "-----> Installing sbcl"
# add sbcl to slug
cp -r  "$CACHE_DIR/sbcl" $BUILD_DIR
# create a symlink in /app/sbcl/sbcl
pushd "$BUILD_DIR/sbcl/"
ln -sf "sbcl-${SBCL_VERSION}-x86-64-linux/run-sbcl.sh" "sbcl"
chmod +x sbcl
popd

echo "-----> Updating sbcl profile.d script"
# populate profile.d
PROFILE_PATH="$BUILD_DIR/.profile.d/sbcl.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export PATH="$HOME/sbcl/:$PATH"' >> $PROFILE_PATH
echo 'export LANG="en_US.UTF-8"' >> $PROFILE_PATH

# Use previous quicklisp installation as cache IN the build dir
if [ -d "${CACHE_DIR}/quicklisp" ]; then
    echo "-----> Restoring quicklisp cache"
    rm -rf ${BUILD_DIR}/quicklisp
    mv ${CACHE_DIR}/quicklisp ${BUILD_DIR}
fi

echo "-----> Starting lisp compilation"
# compile the system
${CACHE_DIR}/sbcl/sbcl-${SBCL_VERSION}-x86-64-linux/run-sbcl.sh --load "$BUILDPACK_DIR/lisp/compile.lisp" --eval "(sb-ext:quit)" | indent

# copy the quicklisp data from build to cache
echo "-----> Caching quicklisp data for future builds..."
cp -r --preserve=all ${BUILD_DIR}/quicklisp ${CACHE_DIR}

# Ok, I don't want to do this, but if the sbcl path in the shebang
# differs from the one running, fasl recompilation is triggered.
# Looking for better alternatives :(
echo "-----> Patching fasl"
find ${BUILD_DIR}/quicklisp/ -name '*.fasl' | xargs sed -i "1 s;${CACHE_DIR};${BUILD_DIR};"

echo "-----> Setting up .sbclrc"
cp "${BUILDPACK_DIR}/lisp/.sbclrc" "${BUILD_DIR}/"

echo "-----> Build finished"
